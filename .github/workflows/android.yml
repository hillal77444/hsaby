name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'نوع البناء'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
          
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          cmdline-tools-version: '9477386'
          packages: |
            build-tools;33.0.0
            platforms;android-33
            ndk;25.1.8937393
            platform-tools
            tools
            emulator
            system-images;android-33;google_apis;x86_64
          accept-android-sdk-licenses: true
          
      - name: Set up Android SDK Environment
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/tools/bin" >> $GITHUB_PATH
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
          
      - name: Create Debug Keystore
        run: |
          cd android_app/app
          keytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          
      - name: List Installed Packages
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list
          
      - name: Decode Keystore
        if: github.event.inputs.build_type == 'release'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
          
      - name: Build APK
        run: |
          cd android_app
          chmod +x ./gradlew
          ./gradlew clean
          if [ "${{ github.event.inputs.build_type }}" == "release" ]; then
            ./gradlew assembleRelease --quiet --no-daemon --build-cache
          else
            ./gradlew assembleDebug --quiet --no-daemon --build-cache
          fi
          
      - name: Check APK
        run: |
          cd android_app/app/build/outputs/apk
          if [ "${{ github.event.inputs.build_type }}" == "release" ]; then
            if [ ! -f "release/app-release-unsigned.apk" ]; then
              echo "APK not found!"
              exit 1
            fi
          else
            if [ ! -f "debug/app-debug.apk" ]; then
              echo "APK not found!"
              exit 1
            fi
          fi
          
      - name: Sign APK
        if: github.event.inputs.build_type == 'release'
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android_app/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEYSTORE_BASE64 }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ github.event.inputs.build_type }}
          path: |
            android_app/app/build/outputs/apk/${{ github.event.inputs.build_type }}/*.apk
            android_app/app/build/outputs/logs
            android_app/app/build/reports
          if-no-files-found: error
          
  download:
    needs: build
    if: github.event.inputs.build_type == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: app-release
          
      - name: Create ZIP
        run: |
          cd app-release
          zip -r ../app-release.zip .
          
      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: app-release-zip
          path: app-release.zip
          if-no-files-found: error
          
  clean:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Clean Gradle Cache
        run: |
          cd android_app
          ./gradlew cleanBuildCache
          rm -rf ~/.gradle/caches/
          ./gradlew --stop
